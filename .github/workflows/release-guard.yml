name: release-guard
on:
  release:
    types: [published, edited]

concurrency:
  group: release-guard-${{ github.repository }}-${{ github.event.release.id || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  release-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Validate release assets (.onnx / .sha256 only)
        uses: actions/github-script@v7
        with:
          script: |
            // --- Configuration ---
            const ALLOWED_EXTENSIONS = new Set([".onnx", ".sha256"]);
            // ----------------------

            const release = context.payload.release;
            if (!release) {
              core.setFailed("No release payload found.");
              return;
            }

            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const assets = Array.isArray(release.assets) ? release.assets : [];

            const normalize = (name) => String(name ?? "").trim().toLowerCase();
            const hasAllowedExt = (name) => {
              const lower = normalize(name);
              for (const ext of ALLOWED_EXTENSIONS) if (lower.endsWith(ext)) return true;
              return false;
            };

            // Collect violating asset names
            const violations = assets
              .filter((a) => !hasAllowedExt(a.name))
              .map((a) => a.name);

            core.info(`Release '${release.tag_name}' has ${assets.length} asset(s).`);

            if (violations.length === 0) {
              core.info("All assets are allowed (.onnx / .sha256 only).");
              return;
            }

            core.warning(`Forbidden assets detected: ${violations.join(", ")}`);

            // Try to delete the release first
            try {
              await github.request("DELETE /repos/{owner}/{repo}/releases/{release_id}", {
                owner,
                repo,
                release_id: release.id,
              });
              core.info(`Deleted release id=${release.id}.`);
            } catch (e) {
              core.warning(`Failed to delete release id=${release.id}: ${e.message}`);
            }

            // Then delete the associated tag
            try {
              await github.request("DELETE /repos/{owner}/{repo}/git/refs/{ref}", {
                owner,
                repo,
                ref: `tags/${release.tag_name}`,
              });
              core.info(`Deleted tag 'tags/${release.tag_name}'.`);
            } catch (e) {
              core.warning(`Failed to delete tag 'tags/${release.tag_name}': ${e.message}`);
            }

            // Fail the workflow after cleanup attempt
            core.setFailed(
              `Release rejected: non-allowed assets found (${violations.join(", ")}). Only .onnx and .sha256 are permitted.`
            );
